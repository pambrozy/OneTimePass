//
//  HashAlgorithmTests.swift
//  OneTimePass
//
//  Created by Przemek Ambroży on 27.06.2022.
//  Copyright © 2022 Przemysław Ambroży
//

import Crypto
@testable import OneTimePass
import XCTest

final class HashAlgorithmTests: XCTestCase {
    private static let data: [UInt8] = [0x41]
    private static let key: [UInt8] = [0x41, 0x42, 0x43]

    func testSHA1() {
        let authenticationCode = HashAlgorithm.SHA1.authenticationCode(
            for: Self.data,
            using: SymmetricKey(data: Self.key)
        )

        let expectedResult: [UInt8] = [
            0xC0, 0xEE, 0x16, 0x57,
            0xD4, 0x3B, 0x06, 0xE2,
            0x44, 0xFA, 0xFE, 0x4D,
            0xCF, 0x60, 0x6D, 0xE7,
            0x94, 0x91, 0xEA, 0xA4
        ]

        XCTAssertEqual(authenticationCode, expectedResult)
    }

    func testSHA256() {
        let authenticationCode = HashAlgorithm.SHA256.authenticationCode(
            for: Self.data,
            using: SymmetricKey(data: Self.key)
        )

        let expectedResult: [UInt8] = [
            0x97, 0xB0, 0xBE, 0x24, 0x18, 0x17, 0xAE, 0x27,
            0xF2, 0x2C, 0x85, 0x2D, 0x4D, 0x46, 0x38, 0x29,
            0x7F, 0x7F, 0x42, 0x0B, 0x16, 0x7A, 0x49, 0xF7,
            0xF3, 0x6D, 0xAD, 0x04, 0x73, 0xBD, 0xF0, 0x21
        ]

        XCTAssertEqual(authenticationCode, expectedResult)
    }

    func testSHA512() {
        let authenticationCode = HashAlgorithm.SHA512.authenticationCode(
            for: Self.data,
            using: SymmetricKey(data: Self.key)
        )

        let expectedResult: [UInt8] = [
            0x24, 0xDE, 0x54, 0x05, 0xEE, 0xC8, 0xA9, 0x33,
            0xC4, 0xCD, 0x2C, 0x91, 0x5D, 0x49, 0x44, 0x03,
            0xF3, 0xA6, 0x9C, 0x7B, 0x6E, 0x34, 0x10, 0x67,
            0x13, 0x79, 0xA5, 0xF3, 0xB5, 0x66, 0x39, 0x73,
            0x22, 0x92, 0xBE, 0x1A, 0xB4, 0x96, 0x2F, 0x08,
            0x99, 0x3C, 0x1C, 0xD7, 0x7D, 0xB1, 0xB5, 0x37,
            0xAF, 0x60, 0x32, 0x52, 0x10, 0x97, 0x2F, 0xB7,
            0x9A, 0xFB, 0x03, 0x3E, 0x75, 0xB6, 0xAB, 0x69
        ]

        XCTAssertEqual(authenticationCode, expectedResult)
    }
}
